//TypeScript является строго типизированным языком, и каждая переменная и константа в нем имеет определенный тип. При этом в отличие от javascript мы не можем динамически изменить ранее указанный тип переменной.

//boolean: логическое значение true или false
//number: числовое значение
//string: строки
//Array: массивы
//кортежи
//Enum: перечисления
//Any: произвольный тип
//Symbol
//null и undefined: соответствуют значениям null и undefined в javascript
//Never: также представляет отсутствие значения и используется в качестве возвращаемого типа функций, которые генерируют или возвращают ошибку

//Для установки типа применяется знак двоеточия, после которого указывается название типа. Примеры создания переменных:
let x: number = 10; 
let hello: string = "hello world";
let isValid: boolean = true;

//при изменении типа переменной выдастся ошибка
let hello1: string = "hello world";
//hello1 = 23; ошибка


//boolean представляет логическое значение true или false:
let isEnabled: boolean = true;
let isAlive: boolean = false;

//number - Тип number представляет числа, причем все числа в TypeScript, как и в JavaScript, являются числами с плавающей точкой. Поэтому с помощью данного типа можно определять как целые числа, так и числа с плавающей точкой:
let age: number = 36;
let height: number = 1.68;

//string - представляет строки. Как и в JavaScript, в TypeScript строки можно заключать в двойные, либо в одинарные кавычки:
let firstName: string = "Tom";
let lastName = 'Johns';
//Кроме того, TypeScript поддерживает такую функциональность, как шаблоны строк, то есть мы можем задать шаблон в косых кавычках (`), как если бы мы писали обычную строку, и затем в саму строку можно встраивать разные выражения с помощью синтаксиса ${ expr }, где expr - это выражение
let firstName1: string = "Tom";
let age1: number = 28;
let info: string = `Имя ${firstName1}    Возраст: ${age1}`;
console.log(info);  // Имя Tom    Возраст: 28

//bigint - Для представления очень больших чисел в TypeScript добавлен специальный тип bigint. Этот тип позволяет хранить числа больше, чем 253 - 1 - больше, чем позволяет тип number.
const num1: bigint = BigInt(100);
console.log(num1);

//Если не определить тип, TypeScript автоматически выведет тип из присваемого данной переменной значения. Так, на первой строке компилятор TS увидит, что переменной hello присваивается строка, поэтому для нее будет использоваться тип string. Однако на второй строке опять же компилятор выдаст ошибку, поскольку hello переменной уже определен тип string. А новое значение предполагает тип number.
let hello2 = "hello world";
//hello2 = 23; ошибка, тип определен как string

//Тип any - Any описывает данные, тип которых может быть неизвестен на момент написания приложения.
let someVar: any = "hello";
console.log(someVar);   // сейчас someVar - это string
someVar = 20; 
console.log(someVar);   // сейчас someVar - это number

//typeof - С помощью оператора typeof мы можем проверить тип переменной. Это может быть необходимо, когда мы хотим выполнить некоторые операции с переменной, но нам неизвестен ее точный тип (например, переменная представляет тип any)
let sum: any;
sum = 1200;
if (typeof sum === "number") {
    let result: number = sum / 12;
    console.log(result);
}
else{
    console.log("invalid operation");
}
//Оператор typeof может возвращать следующие значения:
/*"string"
"number"
"bigint"
"boolean"
"symbol"
"undefined"
"object"
"function"*/
